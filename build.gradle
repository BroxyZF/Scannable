plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
}

apply from: 'minecraft.gradle'

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

version = "${semver}+${getGitRef()}"
group = 'li.cil.scannable'

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
}

repositories {
    mavenCentral()
    maven {
        url 'https://cursemaven.com'
        content { includeGroup "curse.maven" }
    }
    maven { url "https://maven.architectury.dev/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation ("dev.architectury:architectury-fabric:${project.arch_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include modApi('teamreborn:energy:2.2.0') {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "curse.maven:forgeconfigapi-547434:3671141"
    implementation 'com.electronwill.night-config:core:3.6.3'
    implementation 'com.electronwill.night-config:toml:3.6.3'


    // Just for in-dev convenience. Mod doesn't use any JEI APIs.
    //implementation fg.deobf("curse.maven:jei-238222:3735570")
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "semver": semver
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                'src/main/generated'
            ]
        }
    }
}

loom {
    accessWidenerPath = file('src/main/resources/scannable.accesswidener')
    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true
        }
    }
}

runDatagen {
    // Doesn't re-run the task when its up-to date
    outputs.dir('src/main/generated')
}

task copyGeneratedResources(type: Copy) {
    from 'src/generated'
    into 'src/main'
    exclude 'resources/.cache'
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'li/cil/scannable/api/**'
}

artifacts {
    archives apiJar
}

idea {
    module {
        for (final String exclude in ['run', 'out', 'logs', 'src/generated']) {
            excludeDirs += file(exclude)
        }
    }
}
